// <auto-generated />
using System;
using AquaCore.Infraestructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AquaCore.Infraestructure.Migrations
{
    [DbContext(typeof(AquaCoreDbContext))]
    [Migration("20201217170555_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("AquaCore.Core.Entities.Anotacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nota")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Anotaciones");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Calle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoriaVia")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoGIS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoINE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroImparInicial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroParFinal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroParInicial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroaImparFinal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoVia")
                        .HasColumnType("int");

                    b.Property<int?>("ZonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZonaId");

                    b.ToTable("Calles");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.CategoriaContrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriasContrato");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Apellido1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apellido2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoContable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movil1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movil2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movil3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poblacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SituacionCliente")
                        .HasColumnType("int");

                    b.Property<string>("Telefono1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoCliente")
                        .HasColumnType("int");

                    b.Property<int>("TipoIdentificacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Apellido1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apellido2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContratoId")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movil1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movil2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movil3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poblacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoContacto")
                        .HasColumnType("int");

                    b.Property<int>("TipoIdentificacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Contador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Calibre")
                        .HasColumnType("int");

                    b.Property<int>("ClaseContador")
                        .HasColumnType("int");

                    b.Property<int>("Digitos")
                        .HasColumnType("int");

                    b.Property<int?>("EmpleadoBajaId")
                        .HasColumnType("int");

                    b.Property<int?>("EmpleadoInstalacionId")
                        .HasColumnType("int");

                    b.Property<int?>("EmpleadoRevisionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInstalacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRevision")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MarcaContadorId")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodoRevision")
                        .HasColumnType("int");

                    b.Property<int>("PropiedadContador")
                        .HasColumnType("int");

                    b.Property<int>("TipoContador")
                        .HasColumnType("int");

                    b.Property<int?>("UbicacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoBajaId");

                    b.HasIndex("EmpleadoInstalacionId");

                    b.HasIndex("EmpleadoRevisionId");

                    b.HasIndex("MarcaContadorId");

                    b.HasIndex("UbicacionId");

                    b.ToTable("Contadores");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AccesoOV")
                        .HasColumnType("bit");

                    b.Property<bool>("AmpliacionTramos")
                        .HasColumnType("bit");

                    b.Property<bool>("CanonSocial")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<bool>("CobrarGastosCorrespondencia")
                        .HasColumnType("bit");

                    b.Property<string>("CodigoContable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ConsumoACompensar")
                        .HasColumnType("float");

                    b.Property<bool>("Cortable")
                        .HasColumnType("bit");

                    b.Property<bool>("Empleado")
                        .HasColumnType("bit");

                    b.Property<bool>("EnviarCorrespondencia")
                        .HasColumnType("bit");

                    b.Property<bool>("EnviarFacturasCorreo")
                        .HasColumnType("bit");

                    b.Property<bool>("EnviarFacturasEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("Facturable")
                        .HasColumnType("bit");

                    b.Property<int?>("FamiliaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaAltaFacturacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaDevolucionFianza")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEntregaFianza")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFinAmpliacionTramos")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFinCanonSocial")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFinObra")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFinPobrezaEnergetica")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicioAmpliacionTramos")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicioCanonSocial")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicioPobrezaEnergetica")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaMandato")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaSolicitudAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<double>("Fianza")
                        .HasColumnType("float");

                    b.Property<bool>("GranConsumidor")
                        .HasColumnType("bit");

                    b.Property<int>("Idioma")
                        .HasColumnType("int");

                    b.Property<string>("Mandato")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxConsumo")
                        .HasColumnType("float");

                    b.Property<double>("MinConsumo")
                        .HasColumnType("float");

                    b.Property<bool>("NoFacturableImpago")
                        .HasColumnType("bit");

                    b.Property<int>("NumPersonasCensadas")
                        .HasColumnType("int");

                    b.Property<int>("NumeroLocales")
                        .HasColumnType("int");

                    b.Property<int>("NumeroOtros")
                        .HasColumnType("int");

                    b.Property<int>("NumeroViviendas")
                        .HasColumnType("int");

                    b.Property<string>("OrdenRutaLectura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerfilOV")
                        .HasColumnType("int");

                    b.Property<int>("PeriodoFacturacion")
                        .HasColumnType("int");

                    b.Property<bool>("PobrezaEnergetica")
                        .HasColumnType("bit");

                    b.Property<int?>("RutaLectutaid")
                        .HasColumnType("int");

                    b.Property<int>("SituacionContrato")
                        .HasColumnType("int");

                    b.Property<int>("SituacionFianza")
                        .HasColumnType("int");

                    b.Property<bool>("SuministroCortado")
                        .HasColumnType("bit");

                    b.Property<bool>("SuministroRestringido")
                        .HasColumnType("bit");

                    b.Property<int>("TipoBaja")
                        .HasColumnType("int");

                    b.Property<int>("TipoCliente")
                        .HasColumnType("int");

                    b.Property<int>("TipoControlConsumo")
                        .HasColumnType("int");

                    b.Property<int>("TipoResidencia")
                        .HasColumnType("int");

                    b.Property<int>("TipoSuministro")
                        .HasColumnType("int");

                    b.Property<int?>("UbicacionId")
                        .HasColumnType("int");

                    b.Property<int?>("UsoId")
                        .HasColumnType("int");

                    b.Property<int?>("ZonaFacturacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FamiliaId");

                    b.HasIndex("RutaLectutaid");

                    b.HasIndex("UbicacionId");

                    b.HasIndex("UsoId");

                    b.HasIndex("ZonaFacturacionId");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.DocumentoContrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ContratoId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Documento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Obligatorio")
                        .HasColumnType("bit");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ruta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("DocumentosContrato");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Apellido1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apellido2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movil1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movil2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Movil3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poblacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoEmpleado")
                        .HasColumnType("int");

                    b.Property<int>("TipoIdentificacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.FamiliaContrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Familia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FamiliasContrato");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.MarcaContador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Marca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MarcasContador");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Poblacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CodigoACA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoINE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Poblaciones");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.RutaLectura", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("RutasLectura");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.TarifaServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Factor")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServicioId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoServicioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicioId");

                    b.HasIndex("TipoServicioId");

                    b.ToTable("TarifasServicio");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.TipoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServicioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicioId");

                    b.ToTable("TiposServicio");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Ubicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Bloque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CalleId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Escalera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitud")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Local")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localizacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitud")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parcela")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Piso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoblacionId")
                        .HasColumnType("int");

                    b.Property<int>("PosX")
                        .HasColumnType("int");

                    b.Property<int>("PosY")
                        .HasColumnType("int");

                    b.Property<string>("Puerta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoImputacion")
                        .HasColumnType("int");

                    b.Property<int?>("UbicacionPadreId")
                        .HasColumnType("int");

                    b.Property<int?>("ZonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CalleId");

                    b.HasIndex("PoblacionId");

                    b.HasIndex("UbicacionPadreId");

                    b.HasIndex("ZonaId");

                    b.ToTable("Ubicaciones");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.UsoContrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uso")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsosContrato");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Zona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoblacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PoblacionId");

                    b.ToTable("Zonas");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.ZonaFacturacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ZonasFacturacion");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Anotacion", b =>
                {
                    b.HasOne("AquaCore.Core.Entities.Cliente", null)
                        .WithMany("Anotaciones")
                        .HasForeignKey("ClienteId");

                    b.HasOne("AquaCore.Core.Entities.Contacto", null)
                        .WithMany("Anotaciones")
                        .HasForeignKey("ContactoId");

                    b.HasOne("AquaCore.Core.Entities.Empleado", "Empleado")
                        .WithMany("Anotaciones")
                        .HasForeignKey("EmpleadoId");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Calle", b =>
                {
                    b.HasOne("AquaCore.Core.Entities.Zona", "Zona")
                        .WithMany("Calles")
                        .HasForeignKey("ZonaId");

                    b.Navigation("Zona");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Contacto", b =>
                {
                    b.HasOne("AquaCore.Core.Entities.Contrato", null)
                        .WithMany("Contactos")
                        .HasForeignKey("ContratoId");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Contador", b =>
                {
                    b.HasOne("AquaCore.Core.Entities.Empleado", "EmpleadoBaja")
                        .WithMany()
                        .HasForeignKey("EmpleadoBajaId");

                    b.HasOne("AquaCore.Core.Entities.Empleado", "EmpleadoInstalacion")
                        .WithMany()
                        .HasForeignKey("EmpleadoInstalacionId");

                    b.HasOne("AquaCore.Core.Entities.Empleado", "EmpleadoRevision")
                        .WithMany()
                        .HasForeignKey("EmpleadoRevisionId");

                    b.HasOne("AquaCore.Core.Entities.MarcaContador", "MarcaContador")
                        .WithMany()
                        .HasForeignKey("MarcaContadorId");

                    b.HasOne("AquaCore.Core.Entities.Ubicacion", null)
                        .WithMany("Contadores")
                        .HasForeignKey("UbicacionId");

                    b.Navigation("EmpleadoBaja");

                    b.Navigation("EmpleadoInstalacion");

                    b.Navigation("EmpleadoRevision");

                    b.Navigation("MarcaContador");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Contrato", b =>
                {
                    b.HasOne("AquaCore.Core.Entities.CategoriaContrato", "Categoria")
                        .WithMany("Contratos")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("AquaCore.Core.Entities.Cliente", "Cliente")
                        .WithMany("Contratos")
                        .HasForeignKey("ClienteId");

                    b.HasOne("AquaCore.Core.Entities.FamiliaContrato", "Familia")
                        .WithMany("Contratos")
                        .HasForeignKey("FamiliaId");

                    b.HasOne("AquaCore.Core.Entities.RutaLectura", "RutaLectuta")
                        .WithMany()
                        .HasForeignKey("RutaLectutaid");

                    b.HasOne("AquaCore.Core.Entities.Ubicacion", "Ubicacion")
                        .WithMany("Contratos")
                        .HasForeignKey("UbicacionId");

                    b.HasOne("AquaCore.Core.Entities.UsoContrato", "Uso")
                        .WithMany("Contratos")
                        .HasForeignKey("UsoId");

                    b.HasOne("AquaCore.Core.Entities.ZonaFacturacion", "ZonaFacturacion")
                        .WithMany()
                        .HasForeignKey("ZonaFacturacionId");

                    b.Navigation("Categoria");

                    b.Navigation("Cliente");

                    b.Navigation("Familia");

                    b.Navigation("RutaLectuta");

                    b.Navigation("Ubicacion");

                    b.Navigation("Uso");

                    b.Navigation("ZonaFacturacion");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.DocumentoContrato", b =>
                {
                    b.HasOne("AquaCore.Core.Entities.Contrato", "Contrato")
                        .WithMany("Documentos")
                        .HasForeignKey("ContratoId");

                    b.Navigation("Contrato");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.TarifaServicio", b =>
                {
                    b.HasOne("AquaCore.Core.Entities.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");

                    b.HasOne("AquaCore.Core.Entities.TipoServicio", "TipoServicio")
                        .WithMany()
                        .HasForeignKey("TipoServicioId");

                    b.Navigation("Servicio");

                    b.Navigation("TipoServicio");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.TipoServicio", b =>
                {
                    b.HasOne("AquaCore.Core.Entities.Servicio", "Servicio")
                        .WithMany("TiposServicio")
                        .HasForeignKey("ServicioId");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Ubicacion", b =>
                {
                    b.HasOne("AquaCore.Core.Entities.Calle", "Calle")
                        .WithMany()
                        .HasForeignKey("CalleId");

                    b.HasOne("AquaCore.Core.Entities.Poblacion", "Poblacion")
                        .WithMany()
                        .HasForeignKey("PoblacionId");

                    b.HasOne("AquaCore.Core.Entities.Ubicacion", "UbicacionPadre")
                        .WithMany("UbicacionesHijas")
                        .HasForeignKey("UbicacionPadreId");

                    b.HasOne("AquaCore.Core.Entities.Zona", "Zona")
                        .WithMany()
                        .HasForeignKey("ZonaId");

                    b.Navigation("Calle");

                    b.Navigation("Poblacion");

                    b.Navigation("UbicacionPadre");

                    b.Navigation("Zona");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Zona", b =>
                {
                    b.HasOne("AquaCore.Core.Entities.Poblacion", "Poblacion")
                        .WithMany("Zonas")
                        .HasForeignKey("PoblacionId");

                    b.Navigation("Poblacion");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.CategoriaContrato", b =>
                {
                    b.Navigation("Contratos");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Cliente", b =>
                {
                    b.Navigation("Anotaciones");

                    b.Navigation("Contratos");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Contacto", b =>
                {
                    b.Navigation("Anotaciones");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Contrato", b =>
                {
                    b.Navigation("Contactos");

                    b.Navigation("Documentos");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Empleado", b =>
                {
                    b.Navigation("Anotaciones");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.FamiliaContrato", b =>
                {
                    b.Navigation("Contratos");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Poblacion", b =>
                {
                    b.Navigation("Zonas");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Servicio", b =>
                {
                    b.Navigation("TiposServicio");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Ubicacion", b =>
                {
                    b.Navigation("Contadores");

                    b.Navigation("Contratos");

                    b.Navigation("UbicacionesHijas");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.UsoContrato", b =>
                {
                    b.Navigation("Contratos");
                });

            modelBuilder.Entity("AquaCore.Core.Entities.Zona", b =>
                {
                    b.Navigation("Calles");
                });
#pragma warning restore 612, 618
        }
    }
}
